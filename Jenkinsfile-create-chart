#!/usr/bin/env groovy
import groovy.json.JsonSlurper

node (SLAVE) {

    def IMAGE_TAG = getLatestDockerImage(ART_SERVER_URL)

    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */
        git url: 'https://github.com/jainishshah17/containerize-go-microservice.git', branch: 'master'
    }

    stage('Install helm & JFrog CLI') {
         /* This installs helm client */
        sh "curl -O https://storage.googleapis.com/kubernetes-helm/helm-v2.9.1-linux-amd64.tar.gz"
        sh "tar -xvf helm-v2.9.1-linux-amd64.tar.gz"
        sh "chmod 777 ./linux-amd64/helm"
        sh "./linux-amd64/helm version -c"
        /* This installs and configure JFrog Cli */
        sh "curl -fL https://getcli.jfrog.io | sh"
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
        sh "./jfrog rt config --url ${ART_SERVER_URL} --user ${env.USERNAME} --password ${env.PASSWORD}"
        }
    }

    stage('Build Chart & push it to Artifactory repo') {
        /* Configure helm client to point to k8s cluster */
         sh "./linux-amd64/helm init -c"
         sh "sed -i 's/0.1.0/0.1.${env.BUILD_NUMBER}/' go-service/Chart.yaml"
         sh "sed -i 's/latest/${IMAGE_TAG}/g' go-service/values.yaml"
         sh "rm *.tgz"
         sh "./linux-amd64/helm package ./go-service/"
         sh "./jfrog rt u '*.tgz' ${REPO} --build-name=${env.JOB_NAME} --build-number=${env.BUILD_NUMBER}"
         sh "./jfrog rt bce ${env.JOB_NAME} ${env.BUILD_NUMBER}"
         sh "./jfrog rt dl docker-prod-local/containerize-go-microservice/${IMAGE_TAG}/manifest.json --build-name=${env.JOB_NAME} --build-number=${env.BUILD_NUMBER} "
         sh "./jfrog rt bp ${env.JOB_NAME} ${env.BUILD_NUMBER}"
    }
}

def getLatestDockerImage (server_url) {

   def aqlString = 'items.find ({ "repo":"docker-prod-local","type":"folder","$and":[{"path":{"$match":"containerize-go-microservice*"}},{"path":{"$nmatch":"containerize-go-microservice/latest"}}]}).include("path","created","name").sort({"$desc" : ["created"]}).limit(1)'

   File aqlFile = File.createTempFile("dockerlatest", ".tmp")
   aqlFile.deleteOnExit()

   aqlFile << aqlString

   withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
       def getLatestChart = "curl -u$USERNAME:$PASSWORD -X POST " + server_url + "/api/search/aql -T " + aqlFile.getAbsolutePath()

       try {
             def helmchartinfo = getLatestChart.execute().text
             def jsonSlurper = new JsonSlurper()
             def latestChart = jsonSlurper.parseText("${helmchartinfo}")
             return latestChart ? latestChart.results[0].name:"latest"
        } catch (Exception e) {
            println "Caught exception finding latest containerize-go-microservice helm chart. Message ${e.message}"
            throw e
        }
    }
}
